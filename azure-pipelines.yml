trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk (for GitVersion)'
  inputs:
    packageType: sdk
    version: 5.x

- task: gitversion/setup@0
  displayName: 'Setup GitVersion'
  inputs:
    versionSpec: '5.7.0'

- task: gitversion/execute@0
  displayName: 'Execute GitVersion'
  inputs:
    useConfigFile: true
    configFilePath: '$(Build.SourcesDirectory)/GitVersion.yml'

- script: sed -i 's/$VERSION/$(GitVersion.NuGetVersion)/g' default/app.conf
  displayName: 'Set Version in app.conf'

- script: tar --exclude='azure-pipelines.yml' --exclude='.git' --exclude='.gitignore' --exclude='GitVersion.yml' --transform 's|^|/sourcetype_monitor/|' -czf $(Build.ArtifactStagingDirectory)/sourcetype_monitor_$(GitVersion.NuGetVersion).tgz .
  displayName: 'Package App'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifact'
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)/sourcetype_monitor_$(GitVersion.NuGetVersion).tgz
    artifactName: 'sourcetype_monitor'

- task: GithubRelease@0 
  displayName: 'Create GitHub Release'      
  inputs:
    gitHubConnection: triddell-Releases
    repositoryName: triddell/sourcetype_monitor
    tagSource: manual
    tag: $(GitVersion.NuGetVersion)      
    assets: $(Build.ArtifactStagingDirectory)/*.tgz
  condition: and(succeeded(), eq('true', variables['CUT_RELEASE']))
